#!/usr/bin/env python

import argparse
import os
from subprocess import check_output


IP = '10.20.0.2'

DOCKER_DEVICEMAPPER_PATH = '/var/lib/docker/devicemapper/mnt/'

DEFAULT_CONTAINER = 'nailgun'


def target_dir(container):
    if container == 'nailgun':
        return os.path.join(
            get_container_directory(container),
            'rootfs',
            'usr/lib/python2.6/site-packages/nailgun'
        )
    else:
        raise NotImplementedError


def get_docker_id(container):
    return check_output([
        'ssh', 'root@%s' % IP, '-C', 'docker ps | grep -i %s | cut -f 1 -d " "' % container
    ]).strip()


def get_container_directory(container):
    iid = get_docker_id(container)

    paths = check_output([
        'ssh', 'root@%s' % IP, '-C', 'ls %s | grep %s' % (DOCKER_DEVICEMAPPER_PATH, iid)
    ])

    return os.path.join(DOCKER_DEVICEMAPPER_PATH, paths.split()[0])


def perform_docker_rsync(container, source):
    result = check_output([
        'rsync', '-avz', '-e', 'ssh', source, 'root@%s:%s' % (IP, target_dir(container))
    ])

    print(result)

    # post rsync tasks
    if container == 'nailgun':
        result = check_output([
            'ssh', 'root@%s' % IP, '-C', 'supervisorctl restart docker-nailgun'
        ])

        print(result)


def handle_args(args):
    command = args.command[0]
    arguments = args.command[1:]

    if command == 'docker':
        subcommand = arguments[0]

        container = args.container
        if container is None:
            container = DEFAULT_CONTAINER

        if subcommand == 'id':
            print(get_docker_id(container))

        elif subcommand == 'dir':
            print(get_container_directory(container))

        elif subcommand == 'rsync':
            source = args.source
            if source is None:
                source = '.'

            perform_docker_rsync(container, source)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Mirantis helper script')

    parser.add_argument('command', type=str, nargs='+')
    parser.add_argument('--container', type=str, nargs='?')
    parser.add_argument('--source', type=str, nargs='?')

    args = parser.parse_args()

    handle_args(args)

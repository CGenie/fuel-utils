#!/usr/bin/env python

import argparse
import os
from subprocess import check_output


IP = '10.20.0.2'

DOCKER_DEVICEMAPPER_PATH = '/var/lib/docker/devicemapper/mnt/'

DEFAULT_CONTAINER = 'nailgun'


class DockerCommand(object):
    container = None

    def execute(self, command, args):
        if command == 'id':
            print(self.get_docker_id())

        elif command == 'dir':
            print(self.get_container_directory())

        elif command == 'rsync':
            source = args.source or '.'

            self.perform_docker_rsync(source)

        else:
            raise NotImplementedError('Unknown command')

    def target_dir(self):
        raise NotImplementedError('target_dir not implemented for base class')

    def get_docker_id(self):
        return check_output([
            'ssh', 'root@%s' % IP, '-C', 'docker ps | grep -i %s | cut -f 1 -d " "' % self.container
        ]).strip()

    def get_container_directory(self):
        iid = self.get_docker_id()

        paths = check_output([
            'ssh', 'root@%s' % IP, '-C', 'ls %s | grep %s' % (DOCKER_DEVICEMAPPER_PATH, iid)
        ])

        return os.path.join(DOCKER_DEVICEMAPPER_PATH, paths.split()[0])

    def perform_docker_rsync(self, source):
        result = check_output([
            'rsync', '-avz', '-e', 'ssh', source, 'root@%s:%s' % (IP, self.target_dir())
        ])

        print(result)

        # post rsync tasks
        self.post_docker_rsync()

    def post_docker_rsync(self):
        pass


class NailgunDockerCommand(DockerCommand):
    container = 'nailgun'

    def target_dir(self):
        return os.path.join(
            self.get_container_directory(),
            'rootfs',
            'usr/lib/python2.6/site-packages/nailgun'
        )

    def post_docker_rsync(self):
        result = check_output([
            'ssh', 'root@%s' % IP, '-C', 'supervisorctl restart docker-nailgun'
        ])

        print(result)


def handle_args(args):
    command = args.command[0]
    arguments = args.command[1:]

    if command == 'docker':
        subcommand = arguments[0]

        container = args.container or DEFAULT_CONTAINER

        if container == 'nailgun':
            executor = NailgunDockerCommand()
        else:
            raise NotImplementedError('Unsupported Docker container')

        executor.execute(subcommand, args)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Mirantis helper script')

    parser.add_argument('command', type=str, nargs='+')
    parser.add_argument('--container', type=str, nargs='?')
    parser.add_argument('--source', type=str, nargs='?')

    args = parser.parse_args()

    handle_args(args)

#!/usr/bin/env python

import argparse
import json
import os
import six
from subprocess import call, check_output, CalledProcessError, STDOUT
import sys


IP = None

DOCKER_CONTAINER_PATH = '/var/lib/docker/containers/'
DOCKER_DEVICEMAPPER_PATH = '/var/lib/docker/devicemapper/mnt/'

DEFAULT_CONTAINER = 'nailgun'

IDENTITY_FILE = None

SSH_PASSWORD_CHECKED = False

VERBOSE = False


class DockerError(Exception):
    pass


class SSHError(Exception):
    pass

class UnknownCommand(Exception):
    pass


def print_verbose(*args):
    if VERBOSE:
        six.print_(*args)


def print_info():
    urls = [
        ('OpenStackAPI', 5000, 'http://developer.openstack.org/api-ref.html'),
        ('RabbitMQ', 5672, 'User/password: <empty>'),
        ('RabbitMQ Management', 15672, 'User/password: <empty>'),
    ]

    print('URLS:')
    for name, port, info in urls:
        print('{name:{fill}{align}{width}}http://{IP}:{port:{fill}{align}{width}}{info}'.format(
            name=name,
            IP=IP,
            port=port,
            info=info,
            fill=' ',
            width=20,
            align='<')
        )

    classes = DockerCommand.__subclasses__()
    for klass in sorted(classes, key=lambda k: k.__name__):
        print('-'*20)
        print(klass.container.title())
        if hasattr(klass, 'get_info'):
            print(klass.get_info())

        print('')


def ssh_command(*args):
    global SSH_PASSWORD_CHECKED

    print_verbose("COMMAND: %r" % list(args))

    commands = ['ssh', 'root@%s' % IP, '-i', IDENTITY_FILE, '-C'] + list(args)

    if not SSH_PASSWORD_CHECKED:
        # NOTE: test if key is added to .authorized_keys with

        SSH_PASSWORD_CHECKED = True

        try:
            check_output([
                'ssh', '-o', 'PasswordAuthentication=no', 'root@%s' % IP, 'echo 1'
            ], stderr=STDOUT)
        except CalledProcessError as e:
            if 'remote host identification has changed' in \
                    six.u(e.output).decode('utf-8').lower():
                # .ssh/known_hosts error
                raise SSHError(e.output)
                
            # Exit code error -- send .pub key to host
            send_identity()

    return check_output(commands).strip()


def ssh_command_interactive(*args):
    print_verbose("COMMAND: %r" % list(args))

    commands = ['ssh', '-t', 'root@%s' % IP, '-i', IDENTITY_FILE]

    if args:
        commands.append('-C')
        commands.extend(list(args))

    print_verbose('interactive', commands)

    os.execvp('ssh', commands)


def send_identity():
    print_verbose('Sending identity %s for passwordless authentication' %
                  IDENTITY_FILE)

    with open('%s.pub' % IDENTITY_FILE) as f:
        contents = f.read()

    result = ssh_command("echo '%s' >> ~/.ssh/authorized_keys" % contents)

    print_verbose(result)

    return result


class Command(object):
    def base_rsync(self, source, target):
        print('RSYNC: %s --> %s' % (source, target))

        result = check_output(
            ['rsync'] + self.rsync_args() + [source, target]
        )

        print(result.decode('utf-8'))

    @property
    def base_rsync_args(self):
        return ['-a', '-v', '-z', '-e', 'ssh']

    def rsync_args(self):
        return self.base_rsync_args


class DockerCommand(Command):
    container = None

    def base_docker_rsync(self, source, target):
        self.base_rsync(source, target)

        # post rsync tasks
        self.post_docker_rsync()

    def execute(self, command, args):
        if command == 'id':
            print(self.get_docker_id())

        elif command == 'config':
            print(json.dumps(self.get_container_config(), indent=2))

        elif command == 'dir':
            print(self.get_container_directory())

        elif command == 'log':
            result = ssh_command('tail', '-n', '100000', self.get_log_files(args))

            print(result.decode('utf-8'))

        elif command == 'restart':
            self.restart_container()

        elif command == 'rsync':
            self.perform_docker_rsync(args)

        elif command == 'rsync-static':
            self.perform_docker_rsync_static(args)

        elif command == 'shell':
            if args.shell_command:
                self.container_shell_command(*args.shell_command)
            else:
                self.container_shell()

        elif command == 'start':
            self.start_container()

        elif command == 'stop':
            self.stop_container()

        elif command == 'tail':
            ssh_command_interactive('tail', '-F', self.get_log_files(args))

        elif command == 'volumes':
            print(json.dumps(self.get_container_config().get('Volumes', {}), indent=2))

        else:
            raise NotImplementedError('Unknown command')

    def container_shell_command(self, *command):
        return ssh_command_interactive(
            'dockerctl', 'shell', self.get_docker_id(), *command
        )

    def container_shell(self):
        return self.container_shell_command()

    def get_docker_id(self):
        up = ssh_command('docker ps -a | grep -i %s | grep Up | cut -f 1 -d " "' % self.container).decode('utf-8')

        print_verbose('FOUND CONTAINERS: %r' % up)

        if not up:
            raise DockerError("Container '%s' not found or not functional" % self.container)

        return up

    def get_container_config(self):
        d = self.get_container_config_directory()

        config = ssh_command('cat %s/config.json' % d).decode('utf-8')

        return json.loads(config)

    def get_container_config_directory(self):
        iid = self.get_docker_id()

        paths = ssh_command('ls %s | grep %s' % (DOCKER_CONTAINER_PATH, iid)).decode('utf-8')

        return os.path.join(DOCKER_CONTAINER_PATH, paths.split()[0])

    def get_container_directory(self):
        iid = self.get_docker_id()

        paths = ssh_command('ls %s | grep %s' % (DOCKER_DEVICEMAPPER_PATH, iid)).decode('utf-8')

        return os.path.join(DOCKER_DEVICEMAPPER_PATH, paths.split()[0])

    def get_log_directory(self):
        raise NotImplementedError('No log directory for this command')

    def get_log_files(self, args):
        log_dir = self.get_log_directory()
        files = '*.log'

        if args.files:
            if len(args.files) == 1:
                files = '%s.log' % args.files[0]
            else:
                files = '{%s}.log' % ','.join(args.files)

        return os.path.join(log_dir, files)

    def perform_docker_rsync(self, source, args):
        raise NotImplementedError('rsync method not implemented')

    def perform_docker_rsync_static(self, source, args):
        raise NotImplementedError('rsync-static method not implemented')

    def post_docker_rsync(self):
        self.restart_container()

    def restart_container(self):
        result = ssh_command('docker restart %s' % self.get_docker_id())

        print(result)

    def start_container(self):
        result = ssh_command('docker start %s' % self.get_docker_id())

        print(result)

    def stop_container(self):
        result = ssh_command('docker stop %s' % self.get_docker_id())

        print(result)


class AstuteDockerCommand(DockerCommand):
    container = 'astute'

    @classmethod
    def get_info(cls):
        return """
Admin token is stored in /etc/fuel/astute.yaml on Fuel Main.
        """

    def get_log_directory(self):
        return '/var/log/docker-logs/astute'


class KeystoneDockerCommand(DockerCommand):
    container = 'keystone'

    @classmethod
    def get_info(cls):
        return """Authorize using cURL:
curl -i 'http://%(IP)s:5000/v2.0/tokens' -X POST -H "Content-Type: application/json" -H "Accept: application/json"  -d '{"auth": {"tenantName": "admin", "passwordCredentials": {"username": "admin", "password": "admin"}}}'
List tenants using the token:
curl -i -X GET http://%(IP)s:35357/v2.0/tenants -H "User-Agent: python-keystoneclient" -H "X-Auth-Token: token"

Admin password change:
keystone --os-endpoint=http://10.20.0.2:35357/v2.0 --os-token=admin_token password-update
        """ % {'IP': IP}


class McollectiveDockerCommand(DockerCommand):
    container = 'mcollective'


class NailgunDockerCommand(DockerCommand):
    container = 'nailgun'

    def container_shell(self):
        return ssh_command_interactive(
            'dockerctl', 'shell', self.get_docker_id(), 'python'
        )

    def get_log_directory(self):
        return '/var/log/docker-logs/nailgun'

    def perform_docker_rsync(self, args):
        source_dir = args.source

        source_path = 'nailgun/nailgun/'
        target_path = 'usr/lib/python2.6/site-packages/nailgun'

        base_target_dir = os.path.join(
            self.get_container_directory(),
            'rootfs'
        )

        source = os.path.join(source_dir, source_path)
        target = 'root@%s:%s' % (IP, os.path.join(base_target_dir, target_path))

        self.base_docker_rsync(source, target)

    def perform_docker_rsync_static(self, args):
        nginx_command = NginxDockerCommand()

        return nginx_command.perform_docker_rsync_static(args)

    def rsync_args(self):
        args = self.base_rsync_args

        args.append('--exclude=*.pyc')

        return args


class NginxDockerCommand(DockerCommand):
    container = 'nginx'

    temporary_build_dir = 'built-static'

    def perform_docker_rsync_static(self, args):
        source_dir = args.source

        # NOTE: slash at the end is important in source_path!
        source_path = 'nailgun/%s/' % self.temporary_build_dir

        if not args.no_grunt:
            self.build_grunt_static(source_dir)

        config = self.get_container_config()
        target_dir = config['Volumes']['/usr/share/nailgun/static']

        source = os.path.join(source_dir, source_path)
        target = 'root@%s:%s' % (IP, target_dir)

        self.base_docker_rsync(source, target)

    def build_grunt_static(self, source_dir):
        cwd = os.path.join(source_dir, 'nailgun')

        print('Building grunt static in %s, temporary static dir is: %s...' % (
            cwd,
            self.temporary_build_dir
            ))

        cmd = (
            'cd %(cwd)s && '
            'grunt build --static-dir=%(temporary_build_dir)s'
        ) % {
                'cwd': cwd,
                'temporary_build_dir': self.temporary_build_dir,
            }

        try:
            result = check_output([
                cmd
            ], shell=True)

            print(result)
        except CalledProcessError as e:
            print('GRUNT ERROR')
            print(e.output)
            raise


class PostgreSQLDockerCommand(DockerCommand):
    container = 'postgres'

    def container_shell(self):
        return ssh_command_interactive(
            'dockerctl', 'shell', self.get_docker_id(), 'su - postgres -c "psql -d nailgun"'
        )


class PuppetCommand(Command):
    # This is not a container really, we just fit it in this schema
    container = 'puppet'

    def rsync(self, args):
        source_dir = args.source

        source_path = 'deployment/puppet/'
        # TODO: do something about hardcoded '2014.2-6.0' string
        target_path = '/etc/puppet/2014.2-6.0/modules'

        source = os.path.join(source_dir, source_path)
        target = 'root@%s:%s' % (IP, target_path)

        self.base_rsync(source, target)


class RabbitMQDockerCommand(DockerCommand):
    container = 'rabbitmq'


def execute_puppet_command(args):
    cmd = PuppetCommand()

    if args.subcommand == 'rsync':
        cmd.rsync(args)
    else:
        raise UnknownCommand('Unknown command')


def handle_args(args):
    command = args.command

    if command == 'docker':
        subcommand = args.subcommand

        container = args.container or DEFAULT_CONTAINER

        for klass in DockerCommand.__subclasses__():
            if container == klass.container:
                executor = klass()
                break
        else:
            raise NotImplementedError('Unsupported Docker container')

        executor.execute(subcommand, args)

    elif command == 'info':
        print_info()

    elif command == 'puppet':
        execute_puppet_command(args)

    elif command == 'send-identity':
        send_identity()

    elif command == 'ssh':
        ssh_command_interactive()

    else:
        raise UnknownCommand('Unknown command')


def add_global_arguments(parser):
    parser.add_argument(
        '--ip',
        help='Set Fuel ISO master IP address',
        default='10.20.0.2',
        type=str,
        nargs='?'
    )

    parser.add_argument(
        '--no-ssh-identity-file',
        help=("Don't use SSH identity file (will ask for password upon every "
              "SSH request)"),
        action='store_true',
        default=False
    )

    parser.add_argument(
        '--ssh-identity-file',
        help='Specify different SSH identity file',
        default=os.path.join(os.environ['HOME'], '.ssh', 'id_rsa.openstack'),
        type=str,
        nargs='?'
    )

    parser.add_argument(
        '--verbose', '-v',
        help='Print more information',
        default=False,
        action='store_true'
    )



if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Mirantis Fuel helper script')

    add_global_arguments(parser)

    subcommand = parser.add_subparsers(
        title='command', 
        description='Command to execute',
        dest='command'
    )

    docker = subcommand.add_parser(
        'docker',
        help='Docker container manipulation'
    )
    add_global_arguments(docker)
    docker.add_argument(
        '--container', '-c',
        type=str,
        nargs='?',
        help='Name of the container to manipulate (default: %s)' % \
            DEFAULT_CONTAINER
    )

    info = subcommand.add_parser(
        'info',
        help='Various useful information about the cluster'
    )
    add_global_arguments(info)

    send_identity_cmd = subcommand.add_parser(
        'send-identity',
        help=('Send public key to fuel-master server for passwordless '
            'authentication')
    )
    add_global_arguments(send_identity_cmd)

    ssh = subcommand.add_parser(
        'ssh',
        help='SSH into fuel-master'
    )
    add_global_arguments(ssh)

    puppet = subcommand.add_parser(
        'puppet',
        help='Puppet manipulation'
    )
    add_global_arguments(puppet)

    docker_subcommand = docker.add_subparsers(
        title='subcommand',
        description='Docker command to execute',
        dest='subcommand'
    )

    docker_subcommand_id = docker_subcommand.add_parser(
        'id',
        help='Print ID of the container'
    )
    add_global_arguments(docker_subcommand_id)

    docker_subcommand_config = docker_subcommand.add_parser(
        'config',
        help='Print container configuration (JSON format)'
    )
    add_global_arguments(docker_subcommand_config)

    docker_subcommand_dir = docker_subcommand.add_parser(
        'dir',
        help='Print rootfs directory of a container'
    )
    add_global_arguments(docker_subcommand_dir)

    docker_subcommand_log = docker_subcommand.add_parser(
        'log',
        help='Print logs for container (default: all logs)'
    )
    add_global_arguments(docker_subcommand_log)
    docker_subcommand_log.add_argument(
        'files',
        type=str,
        nargs='*',
        help='Restrict logs to specific ones (api, app, etc)'
    )

    docker_subcommand_restart = docker_subcommand.add_parser(
        'restart',
        help='Restart container'
    )
    add_global_arguments(docker_subcommand_restart)

    docker_subcommand_rsync = docker_subcommand.add_parser(
        'rsync',
        help='Rsync source directory into container'
    )
    add_global_arguments(docker_subcommand_rsync)
    docker_subcommand_rsync.add_argument(
        '--source', '-s',
        type=str,
        nargs='?',
        default='.',
        help='Source of the rsync directory'
    )

    docker_subcommand_rsync_static = docker_subcommand.add_parser(
        'rsync-static',
        help='Rsync static files into container'
    )
    add_global_arguments(docker_subcommand_rsync_static)
    docker_subcommand_rsync_static.add_argument(
        '--no-grunt',
        action='store_true',
        default=False,
        help=("Don\t run Grunt building task (default: False; note that "
            "by default the minified version is used by fuel-main)")
    )
    docker_subcommand_rsync_static.add_argument(
        '--source', '-s',
        type=str,
        nargs='?',
        default='.',
        help='Source of the rsync directory'
    )

    docker_subcommand_shell = docker_subcommand.add_parser(
        'shell',
        help='Shell into container'
    )
    add_global_arguments(docker_subcommand_shell)
    docker_subcommand_shell.add_argument(
        '--shell-command', '-c',
        type=str,
        nargs='*',
        help='Special shell command to execute'
    )

    docker_subcommand_start = docker_subcommand.add_parser(
        'start',
        help='Start container'
    )
    add_global_arguments(docker_subcommand_start)

    docker_subcommand_stop = docker_subcommand.add_parser(
        'stop',
        help='Stop container'
    )
    add_global_arguments(docker_subcommand_stop)

    docker_subcommand_log = docker_subcommand.add_parser(
        'tail',
        help='Continously inspect (tail) logs of a container'
    )
    add_global_arguments(docker_subcommand_log)
    docker_subcommand_log.add_argument(
        'files',
        type=str,
        nargs='*',
        help='Restrict logs to specific ones (api, app, etc)'
    )

    docker_subcommand_volumes = docker_subcommand.add_parser(
        'volumes',
        help='Print all volumes of a container'
    )
    add_global_arguments(docker_subcommand_volumes)


    puppet_subcommand = puppet.add_subparsers(
        title='subcommand',
        description='Puppet command to execute',
        dest='subcommand'
    )
    puppet_subcommand_rsync = puppet_subcommand.add_parser(
        'rsync',
        help='Rsync modules into Puppet'
    )
    add_global_arguments(puppet_subcommand_rsync)
    puppet_subcommand_rsync.add_argument(
        '--source', '-s',
        type=str,
        nargs='?',
        default='.',
        help='Source of the rsync directory'
    )

    args = parser.parse_args()

    IP = args.ip
    IDENTITY_FILE = args.ssh_identity_file

    if args.no_ssh_identity_file:
        # We don't want to send SSH identity -- pretend that it was sent
        # already
        SSH_PASSWORD_CHECKED = True

    if args.verbose:
        VERBOSE = True

    print_verbose(args)

    try:
        handle_args(args)
    except DockerError as e:
        six.print_(e.message)
        sys.exit(1)
    except UnknownCommand:
        parser.print_help()
    except SSHError as e:
        six.print_(e.message)
        sys.exit(1)
